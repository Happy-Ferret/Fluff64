program RogueBurgerOne;
var
	//	intro_image_color: IncBin("images/lemonspawn_color.bin", "$3000");  // $800
	music1 : incsid("music/fliptape36.sid", "2");
	// 3854
	mainChar: IncBin("charsets/charset_text.bin","$4800"); // $800 bytes
	
	levelChar: IncBin("charsets/charset_level.bin","$5000");// $800 bytes
	sprite0data : incbin("sprites/fastfood.bin", "$5800"); // will be $1000 bytes // locally 2000
	
	multiColorChar: IncBin("charsets/lcharsetMC.bin", "$8800");
	levels: IncBin("levels/levels.flf", "$9000"); // 2400 in hex
	//	intro_image_data: IncBin("images/lemonspawn_data.bin", "$A000"); // $2000 suze
	
	//3832 lines
	
	//	music1 : incsid("fliptape3.sid");
	m_posx, m_posy : byte; // current level position in grid
	i, redraw, j,k,l,val2: byte;  // i is temp, redraw states that the map should be redrawn
	time : byte;

	currentScroll: byte=6;
	keepbitmask : byte;
	
	keyPressedWait : byte;


	sprite1_counter, tmp2,tmp3,val : byte; // sprite1_counter shifts between sprite animations
	spritex, tmp : integer; // Sprite positions and temp integer
	spritey, frameCounter : byte;
	

	player_score : byte;
	player_speed : byte;
	
	current_background : byte;
	TextRogueBurger: string = "ROGUE BURGER ONE";

	IntroText : string = "    ROGUE BURGER ONE WAS THROWN INTO THE SEWERS AFTER BEING DISCARDED BY A DISGRUNTLED CUSTOMER         ";
	IntroText1 : string =" ANGRY WITH THE WORLD SHE GREW UP IN  SHE SWORE TO HUNT DOWN ALL THE REMAINING FAST FOOD IN THE SEWERS OF OSLO       ";
	IntroText2: string = "      BY SHOOTING THEM WITH PIZZA          "; 
	IntroText3 : string =" WHILE UNDERTAKING THIS HUGE BURDEN    SHE CAME ACROSS NUMEROUS SACRED SCROLLS      THAT WAS ABOUT TO TELL A TALE ";
	intro_dataEnd : byte = 255;

	ScrollText1: string = "HALF A POOD OF FLESHY BITS";
	ScrollText2: string = "                   ONIONS WITHOUT A FAULT";
	ScrollText3: string = "A CULLINGLEY OF CHILI HITS";
	ScrollText4: string = "                  TOMATOES AND SOME SALT";
	ScrollText5: string = "MIX AND FRY ON AVERAGE HEAT";
	ScrollText6: string = "                      BUNS TO TOP IT OFF";
	ScrollText7: string = "DEVOUR THE SAVORY DRIPPING MEAT";
	ScrollText8: string = "                  AND SOME BEER TO QUAFF";


/* Credits section 

*/
	creditsCounter: byte = 0;

	@define creditsCMax 4 // Time of credz movement
	@define creditsStartX 10
	@define creditsStartY 17

	@define CreditsColors 3

	creditsX: byte = @creditsStartX;
	creditsY: byte = @creditsStartY;

	@define newline 254
	@define cclear 253
	@define cpause 252	

	CreditsText : string = (129,@cclear, @cpause, "ROGUE BURGER ONE", @newline,@newline, "   INSTRUCTIONS", @cpause,@cpause,@cpause, @cclear,
							"DONT DIE. ", @cpause, 
							@newline, "  PICK UP AMMO", 135, @cpause, @cpause,
							@newline, "    SHOOT STUFF", @cpause,@cpause,128,@cpause,
							@cclear, "PICK UP BOOSTS", @cpause, @cpause,
							@newline, "  HEALTH", 136, @cpause, @cpause,
							@newline, "    AMMO", @cpause, @cpause,@cpause
							@cclear, "PICK UP UPGRADES", @cpause, @cpause,
							@newline, "  HEALTH", @cpause, @cpause,
							@newline, "    AMMO", @cpause, @cpause,@cpause
							@cclear, "SEARCH FOR ", @newline, "  SACRED SCROLLS", @cpause, @cpause,
							@newline, "    PRESS J TO VIEW ", @cpause, @cpause,

							@cclear, @cpause, "DEVELOPED BY", @newline,@newline  
							"     LEMONSPAWN", @cpause, @cpause, @cclear,
							"CODE BY", @cpause, @newline,@newline, " LEUAT", @cpause, @cpause, @cclear
							"MUSIC BY", @cpause, @newline,@newline, "  RICHARD OF TND", @cpause, @cpause, @cclear
							"GRAPHICS BY", @cpause, @newline,@newline, "  LEUAT", @cpause, @cpause, @cclear
							"LEVEL DESIGN BY", @cpause, @newline,@newline, "   LEUAT", @cpause, @cpause, @cclear
							"DEVELOPED WITH", @newline, "  TURBO RASCAL", @newline,"    SYNTAX ERROR", @cpause, @cpause, @cclear
							"WHICH IS ALSO ", @newline, "   CREATED BY", @newline, "    LEUAT", @newline, @cpause,@cpause,@newline,
							"WHO WOULD HAVE GUESSED", @cpause, @cpause
//							"EVERYTHING ELSE BY ", @cpause, @newline,@newline, "    LEUAT", @cpause, @cpause, @cclear
							@cclear, "YOU PROBABLY GET",@newline, "THE IDEA BY NOW", @cpause, @cpause, @cclear

							);
	

	
	// Entity sprite locations in memory *64 on current bank
	entity_sprites : array[8] of byte = (
	$61, $60, $72, $73, $74, $66, $67, $68, $69,$6A,$6B, $6C,
	$6D, $6E, $6F, $70, $71, $76 );
	
	// pai = 1, 60
	// ice cream = 2, 72
	// toast = 3, 73
	// pizza = 4, 74
	// pizza ammo =  5, 66
	// heart = 6, 67
	// health up = 7, 68 , upgrade bit 1
	// ammo up = 8, 69, upgrade bit 2
	// hotdog = 9, 6a
	// kebab = 10, 6b
	// taco = 11, 6c
	// scroll = 12, 6d, upgrade bit 4
	// beer = 13, 6e
	// donut = 14, 6f
	// croissant = 15, 70
	// e = 16, 71
	// shoe = 17, 76 , upgrade  bit 8
	
	
	fade : array [16] of byte = (11,6,6,12,4,14,15,1,1,15,14,4,12,6,6,11);
	
	// Used to calculate direction of pizza bullet
	prev_dx, prev_dy : byte;
	
	
	// Entities
	no_entities : byte;
	entity_pos_x : array[8] of byte;
	entity_pos_y : array[8] of byte;
	entity_curpos_x : array[8] of byte;
	entity_curpos_y : array[8] of byte;
	entity_dd_x : array[8] of byte;
	entity_dd_y : array[8] of byte;
	entity_pos_spread : array[8] of byte;
	entity_type : array[8] of byte;
	entity_sprite : array[8] of byte;
	entity_color : array[8] of byte;
	entity_health : array[8] of byte;
	
	entity_framecounter_x : array[8] of byte;
	entity_framecounter_y : array[8] of byte;
	
	entity_framecounter_maxx : array[8] of byte;
	entity_framecounter_maxy : array[8] of byte;
	
	entity_hurt : array[8] of byte;
	
	entity_pickup : array[8] of byte;
	
	player_health : byte;
	bullet_count : byte;
	
	
	player_maxhealth : byte;
	bullet_max  : byte;
	
	bullet_x : byte;
	bullet_y, bullet_dx, bullet_dy : byte;
	bullet_wait : byte;
	
	bullet_dmg : byte;
	
	joystick_pressed : byte;
	
	
	moveSprite : array[8] of byte = ($61,$62,$63,$64,$65, $64,$63,$62);
	
	@define usekernal 0
	
	
	// pizza is 5, heart is 6, health upgrade is 7, ammo upgrade is 8,
	// hotdog is 9
	//data_header =,id,x,y,life,color, spread, sx, sy, isdead, damage, ammo, sound, upgrade
	
	// Location in .flf files of entity values
	@define entity_id "0"
	@define entity_isdead "8"
	@define entity_damage "9"
	@define entity_ammo "10"
	@define entity_sound "11"
	@define entity_upgrade "12"
	@define entity_tag "13"
	
	@define upgrade_health_bit "0"
	@define upgrade_ammo_bit "1"
	@define upgrade_scroll_bit "2"
	@define upgrade_speed_bit "3"
	
	// Screen writing positions
	@define screen1hi "$44"
	@define screenmem1 "^$4400"
	
	@define screen2hi "$04"
	@define screenmem2 "^$0400"
	
	@define charmapLevel "$14"
	@define charmapText "$12"
	
	@define clearchar "$20"
	
	@define spritebank "1"
	
	@define playerSprite "0"
	@define bulletSprite "7"
	
	@define player_sprite_loc "$60"
	@define bullet_sprite_loc "$66"
	
	@define crashDistance "7"
	
	@define playerSpeed "2"
	
	
	@define highCharMemoryPos "$12"
	
	@define sidchannel "SID_CHANNEL3"
	
	@define levelpointer "zeropage7"
	@define colorpointer "zeropage4"
	

	@define renderText2x2 zeropage1


//	@define immortal true

	
//   Renders a .flf level at map pos x,y



//@include "RasLib/sprites.ras"

// Sprite 0 and 7 are reserved, so we can only have 6 entity sprites in one screen



procedure InitGameOver();
procedure InitNewGame();
procedure rasterUpdateGame();
procedure InitMainScreen();
procedure MainScreen();

@include "rendering.ras"
@include "entities.ras"
@include "player.ras"
@include "introscreen.ras"




procedure debug(db_posx, db_posy, db_val : byte);
begin
	moveto(db_posx, db_posy, @screen1hi);
	printnumber(db_val);
end;


interrupt GameOverLoop();
begin
	startirq(@usekernal);
	setRegularColormode();
	poke(VIC_DATA_LOC, 0, @charmapText);
	val:=val+1;
	moveto(15,10, @screen1hi);
	printstring("GAME OVER", 0, 20);
	moveto(15,13, @screen1hi);
	printstring("SCORE", 0, 20);
	moveto(21,13, @screen1hi);
	printnumber(player_score);
	moveto(0,10, $D8);
	j:=fade[val&15];
	k:=fade[(val+2)&15];
	for i:=0 to 39 do begin
		screenmemory[i] := j;
		screenmemory[i+120] := k;
	end;
	
	call(SIDFILE_1_PLAY);
	Joystick();
	
	if joystickbutton=1 then begin
		InitMainScreen();
		RasterIRQ(MainScreen(), 0, @usekernal);
	end;
	
	
	waitForRaster(200);
	closeirq();
end;







// Funky sprite flashing and noises on game over
procedure InitGameOver();
begin
	for i:=0 to 100 do begin
		poke(SPRITE_COLOR, 0, i);
		poke(SPRITE_COLOR, 1, i);
		waitForRaster(1);
		val:=120-i;
		PlaySound(SID_CHANNEL3,
		15,  // Volume
		val,  // Hi byte frequency
		0*16+0,  // Attack voice 1
		5*16 + 6,   // Sustain = 16*15 + release=6
		1 +SID_NOISE,  // Waveform
		SID_SAW);  // waveform
		
		waitForRaster(255);
	end;
	rasterIRQ(GameOverLoop(), 0,@usekernal);
	
	InitSid(SIDFILE_1_INIT);
	
	Setbank(VIC_BANK1);
	poke(SPRITE_BITMASK, 0, 0);
	ClearScreen($20, $4400);
	ClearScreen($02, SCREEN_COL_LOC);
	poke(VIC_DATA_LOC, 0, @charmapText);
	poke(SCREEN_BG_COL, 0, BLACK);
	
	
	
end;




interrupt RasterUpdateScrollView();
begin
	StartIRQ(@usekernal);
	setbank(VIC_BANK1);
//	poke(VIC_DATA_LOC, 0, @highCharMemoryPos);
	poke(VIC_DATA_LOC, 0, @charmapText);
	if (keypressed(KEY_J)=1 and keyPressedWait=0) offpage then begin
		copyfullscreen(^$0400, ^$4400);
		copyfullscreen(^$8000, ^$D800);
		poke(SPRITE_BITMASK,0, keepbitmask);
		keyPressedWait:=16;
		RasterIRQ(rasterUpdateGame(), 1,@usekernal);
		CloseIRQ();
		returninterrupt();
	end;
	inc(time);
	y:=1;
	for i:=0 to 8 do begin
		moveto(0,y,$D8);
		val:=fade[ (time +i*5)&15];
		fill(screenmemory, val, 40);
		y:=y+l;

	end;


	if keyPressedWait<>0 then dec(keyPressedWait);

	CloseIRQ();
end;



procedure PrepareScrollView();
begin
	keepbitmask:=peek(SPRITE_BITMASK,0);
	SPRITE_BITMASK:=0; // clear sprites
	copyfullscreen(^$4400, ^$0400);
	copyfullscreen(^$D800,^$8000);
	clearscreen(LIGHT_BLUE,$D800);
	clearscreen($20,^$4400);
	poke(VIC_DATA_LOC, 0, @charmapText);
	setregularcolormode();
	keyPressedWait:=16; // Counter for pressing J again
	k:=0;
	y:=1;
	l:=3;

	for i:=0 to 8 do begin
		moveto(0,y,$44);
		if i=0 then printstring(ScrollText1,0,40);
		if i=1 then printstring(ScrollText2,0,40);
		if i=2 then printstring(ScrollText3,0,40);
		if i=3 then printstring(ScrollText4,0,40);
		if i=4 then printstring(ScrollText5,0,40);
		if i=5 then printstring(ScrollText6,0,40);
		if i=6 then printstring(ScrollText7,0,40);
		if i=7 then printstring(ScrollText8,0,40);

		y:=y+l;
	
	end;	



end;



interrupt rasterUpdateGame();
begin
	// Call sid
	//	call(SIDFILE_1_PLAY);
	// Make sure upper part of screen renders text
	StartIRQ(@usekernal);
	inc(time);

	if (keypressed(KEY_J)=1 and keyPressedWait=0) then begin
		PrepareScrollView();
		RasterIRQ(RasterUpdateScrollView(), 1, @usekernal);
		CloseIRQ();	
		asm(" rti");
	end;
	if keyPressedWait<>0 then dec(keyPressedWait);
	

	//setRegularColorMode();
	setMultiColorMode();
	poke(MULTICOLOR_CHAR_COL, 0, BLACK);
	waitForRaster(1);
	// Set regular text font
	setbank(VIC_BANK2);
	poke(VIC_DATA_LOC, 0, @highCharMemoryPos);
	// Wait until level starts
	PrintTextColor();
	UpdateBullet();
	UpdateEntities();
	
	waitforRaster(67);
	// Set multi color & level font
	setbank(VIC_BANK1);
	
	poke(MULTICOLOR_CHAR_COL, 0, current_background);
	poke(VIC_DATA_LOC, 0, @charmapLevel);
	setMulticolorMode();
	RenderHealthBar();
	RenderBulletBar();
	moveto(36, 1, @screen1hi);
	printnumber(player_score);
	
	UpdatePlayer();

	waitForRaster(243);
	// Go back to regular font
	
	poke(MULTICOLOR_CHAR_COL, 0, BLACK);
	poke(VIC_DATA_LOC, 0, @charmapText);
	
	
	waitForRaster(255);
	// Make sure multicolor font is loaded afterwards
	poke(VIC_DATA_LOC, 0, @charmapLevel);
	
	// Acknowledge interrupt
	
	
	
	CloseIRQ();	
	
end;


procedure InitNewGame();
begin
	m_posx:=0;
	m_posy:=0;
	

	//copyfullscreen(^$B000,^$8400);

	// Initial map rendering
	@levelpointer := levels;
	ResetLevels();
	@levelpointer := levels;
	RenderLevel(m_posx, m_posy, @screen1hi);
	current_background := peek(MULTICOLOR_CHAR_COL,0);
	LoadEntities();
	InitEntities();
	
	// Initial sprite position
	spritex := 160;
	spritey := 100;
	
	player_speed := 1;
	
	sprite1_counter := 1;
	bullet_wait := 0;
	player_score := 0;
	joystick_pressed := 0;
	bullet_dmg:=4;
	bullet_count :=8;
	
	player_health := 30;
	player_maxhealth := 30;
	
	bullet_max := 10;
	
	frameCounter:=0;
	
	setmulticolormode();
	// Remember to implement resetting all "isdead" flag. also, make this part of flags bit.
end;



interrupt NMI();
begin
	
end;


begin
	
	//initsid(SIDFILE_1_INIT);
	//	Intro();
	// TURN OFF Kernal Basic! WHOO!



	InitSid(SIDFILE_1_INIT);
	preventirq();
	disableciainterrupts();
	nmiirq(NMI());	
	setmemoryconfig(1,@usekernal,0);

	// Take care of levels that is being killed at $8400
//	copyfullscreen(^$8400,^$B000);


	InitMainScreen();
	// Hook that raster!
	//DisableInterrupts();
	RasterIRQ(MainScreen(), 100,@usekernal);
	enablerasterirq();
	enableirq();
	Loop();
end.

