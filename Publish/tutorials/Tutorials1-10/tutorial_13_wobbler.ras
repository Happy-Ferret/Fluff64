program Tutorial3;
var
	time1, time2,x,y,j,i,val,k, kk,xx,yy:byte;
	mainChar: IncBin("charsets/tutorial13.bin","$2800");
//	mainChar2: IncBin("charsets/tutorial3.bin","$67FF");
	sinetabL : array[256] of byte;
	sinetabS : array[256] of byte;
	
	fade: array[8] of byte = (0, 11, 12, 15, 7,1,7,15,12,11);
	fade2: array[8] of byte = (11, 9, 2, 10, 10,2,9,11,11,11);
	fade3: array[8] of byte = (1, 0, 2, 3, 4,5,6,7,8,9,10,11,12,13,14,15,16,0,1,2,3,4,5,6,7);

	text : string="WHOO YET ANOTHER SCROLLER, TESTING SOME STABILITY. DOESN'T WORK BUT WHO CARES";
	text1 : string="     THIS WHOLE RASTER STABILITY ISSUE IS KINDA ANNOYING, MAYBE I SHOULD STICK TO MAKING GAMES";

	tab:array[16] of byte=(1,9,9,9,9,9,9,9,1,9,9,9,9,9,9,9);

	pos_x,dx,dy,scroll: byte = 0;
	pos_y : byte;
	di : byte = 2;
	
procedure RenderChunks();
begin
	
	xx:=pos_x/4;
	yy:=pos_y/8;
	
	
	moveto(xx, yy, $04);
	k:=0;
	for x:=0 to 29 do
		screenmemory[x]:=$20;

	incscreenx(40);
	
	for y:=0 to 4 onpage do begin
		screenmemory[0]:=$20;
		screenmemory[27]:=$20;
		screenmemory[28]:=$20;
		//asm(";crash");
		for x:=1 to 26 onpage do begin
			screenmemory[x]:=x+k;
		end;
		//yshift:=yshift+yadd;
		k:=k+40;
		incscreenx(40);
	end;
	for x:=0 to 29 do
		screenmemory[x]:=$20;
	
end;


interrupt UpdateRaster();
begin
	pos_x:=(sine[time2]/6);
	pos_y:=(sine[time1]/8);
	//pos_y:=16;
	//printstring(text,0,20);	
	waitforraster(1);
	
	dx:=(pos_x&3)*2;
	dy:=(pos_y&7);
	scrolly(dy);
	
	RenderChunks();
	
	scrollx(dx);
	
	inc(kk);
	/*	if kk=1 then begin
		kk:=0;
		di:=di+1;
	end;	*/
	time1:=time1  + 5;
	time2:=time2  + 3;
	
	
	val:=time1&7;
//	poke(MULTICOLOR_CHAR_COL, 1,fade[val]);
	
	moveto(37,18,$44);
//	if dy=0 then incscreenx(40);
	val:=zeropage5[0]-64;
		if val<64 then
			screenmemory[0]:=val
		else screenmemory[0]:=$20;
		if val<64 then
			screenmemory[40]:=val
		else screenmemory[40]:=$20;
	
/*	for i:=0 to 40 do begin
		val:=zeropage5[i]-64;
		if val<64 then begin
			screenmemory[i]:=val;
		end
		else screenmemory[i]:=$20;
	end;*/
	
	waitforraster(150);
	scrollx(0);
	scrolly(0);
	waitforraster(166);
	//for i:=0 to 16 do begin
//		SCREEN_BG_COL:=fade[i&7];
	//	SCREEN_FG_COL:=fade[i&7];
/*		asm("
			nop
			nop
			nop
			sta $D800,x
			sta $D800,x
;			sta $04
			sta $04
			sta $D800,x
			sta $D800,x
			sta $D800,x
			sta $D800,x

			");*/
//	end;

	SCREEN_BG_COL:=BLACK;
	SCREEN_FG_COL:=BLACK;

	waitforraster(199);
	scrollx(scroll);
	//SCREEN_BG_COL := BLUE;
	//SCREEN_FG_COL := BLUE;
	//	scrolly(dy);
	setbank(VIC_BANK1);
	setregularcolormode();
	waitforraster(207);
	//scrollx(dx);

	setbank(VIC_BANK0);
	SCREEN_BG_COL := BLACK;
	SCREEN_FG_COL := BLACK;
	setmulticolormode();
	dec(scroll);
	if scroll>128 then begin
		scroll:=7;
		inczp(zeropage5,1);
		unrolledmemcpy(^$46D0, 1, ^$46F8, 39);
		unrolledmemcpy(^$46D0, 1, ^$46D0, 39);

	end;
	scrollx(dx);

	poke(MULTICOLOR_CHAR_COL, 2, fade2[scroll]);


	kernalinterrupt();
end;



interrupt pureRaster();
begin
	SCREEN_FG_COL:=BLACK;
	SCREEN_BG_COL:=BLUE;
//	waitforraster(99);
	asm("
		
        ldy     #16 ; 4
		ldx #100
		cpx $d012
		bne *-3
		
rloop2:
		ldx tab,y     ; 4
		dex            ; 4*9 = 36
		bne *-1          
                           ;40
		lda fade3,y         ;44
		sta 53281          ;58 
		sta 53280          ;52 
    
        dey                ;54         
        bne     rloop2      ;56


		");
	waitnoraster(1);

	SCREEN_FG_COL:=BLACK;

	kernalinterrupt();
end;


procedure InitSine();
begin
	for i:=0 to 255 do begin
		sinetabL[i]:=sine[i]/64;
		sinetabS[i]:=(sine[i]/8)&7;
	end;
	sinetabL[255] := sine[255]/64;
	sinetabS[255] := (sine[255]/8)&7;
	
end;


begin
	InitSine();

	asm(";testtest");
	setmemoryconfig(1,0,0);

	setmulticolormode();
	//setbitmapmode();
	//poke(VIC_DATA_LOC, 0,$18);
	setbank(VIC_BANK0);
	poke(VIC_DATA_LOC, 0, $1A);
	poke(MULTICOLOR_CHAR_COL, 0, BLACK);
	poke(MULTICOLOR_CHAR_COL, 1, YELLOW);
	poke(MULTICOLOR_CHAR_COL, 2, DARK_GREY);
	
	//copyimagecolordata(image_color,0);
	clearscreen($20,$0400);
	clearscreen($20,$4400);
	clearscreen(14,$D800);
	SCREEN_BG_COL:=BLACK;
	hideborderx(1);
	pos_x:=20;
	pos_y:=90;

	zeropage5:=text;	
	copycharsetfromrom(^$6800);
	DisableCIAInterrupts();
	RasterIRQ(UpdateRaster(), 1);
//	RasterIRQ(pureRaster(), 1);
	EnableInterrupts();
		
//	while 1=1 do UpdateRaster();
	
	Loop();
	
end.

