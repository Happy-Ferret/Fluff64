program Tutorial11_Lines;
var
	i, j,k,val,r,sin,cos: byte=5;

	center: array[2] of byte=(80,100);
	theta,x0,x1,y0,y1,z: byte;
	
	
	xx,yy,x,y,t : integer;

	px: array[3] of byte = (40, 70, 50);
	py: array[3] of byte = (40, 70, 50);


	@define address zeropage1
	@define bitmapstart "$2000"
	
	// Currently, putpixel2 and putpixel3 are supported
	@define putpixel "putpixel2();"
	
	@include "../RasLib/bitmapgraphics.ras"



/*
  switch between bank 0 and 1
*/
procedure SwitchDrawBank();
begin
	if bmg_currbank=0 then begin
		bmg_currbank := $40;
		SetBank(VIC_BANK0);
		clearbitmap($6400, 22); // Clear a certain window only
	end
	
	else
	begin
		bmg_currbank:=0;
		SetBank(VIC_BANK1);
		clearbitmap($2400, 22);
	end;
	
end;


procedure filler(fx1, fx2, fy:byte);
begin
	bmg_y1:=fy;
	for i:=fx1 to fx2 do begin
		bmg_x1:=i;
		putpixel2();
	end;

end;


procedure Polygon ( bmg_xx1, bmg_yy1, bmg_xx2, bmg_yy2, bmg_xx3, bmg_yy3 : byte);
begin
	bmg_dx:=0;
	bmg_dy:=0;
	bmg_d:=0;
	
	if bmg_xx1 < bmg_xx2 then begin
		bmg_xi := 1;
		bmg_dx := bmg_xx2 - bmg_xx1;
	end
	else
		begin
		bmg_xi := 255;
		bmg_dx := bmg_xx1 - bmg_xx2;
	end;
	
	if bmg_yy1 < bmg_yy2 then begin
		bmg_yi := 1;
		bmg_dy := bmg_yy2 - bmg_yy1;
	end
	
	else
		begin
		bmg_yi := 255;
		bmg_dy := bmg_yy1 - bmg_yy2;
	end;
	@putpixel
	if bmg_dx > bmg_dy then begin
		
		bmg_ai := (bmg_dy - bmg_dx);
		bmg_bi := bmg_dy;
		bmg_d := bmg_bi - bmg_dx/2;
		while bmg_xx1 <> bmg_xx2 do begin
			if bmg_d <128 do begin

				bmg_yy1 := bmg_yy1 + bmg_yi;
				bmg_d := bmg_d + bmg_ai;
			end
			else
				bmg_d := bmg_d + bmg_bi;
			
			bmg_xx1 :=  bmg_xx1 + bmg_xi;
			bmg_x1:=bmg_xx1;
			bmg_y1:=bmg_yy1;
			@putpixel
		end;
	end
	else
		begin // dy > dx
		bmg_ai := (bmg_dx - bmg_dy);
		bmg_bi := bmg_dx;
		bmg_d := bmg_bi - bmg_dy/2;
		
		while bmg_yy1 <> bmg_yy2 do begin
			if bmg_d<128 do begin
				bmg_xx1 := bmg_xx1+ bmg_xi;
				bmg_d := bmg_d + bmg_ai;
				
			end
			else
				bmg_d := bmg_d+  bmg_bi;
			
			
			bmg_yy1 := bmg_yy1 + bmg_yi;
			bmg_x1:=bmg_xx1;
			bmg_y1:=bmg_yy1;
			@putpixel
		end;
		
	end;
end;



/*ldy bmg_y1
	ldx bmg_x1
	
	lda ytablelow,y
	clc
	adc xtablelow,x
	sta @address
	
	lda ytablehigh,y
	adc bmg_currbank
	adc xtablehigh,x
	sta @address+1
	
	ldy #$00
	lda (@address),y
	
	ora bmg_mask,x
	sta (@address),y
*/
procedure Rotate2D(th, ii, wx, wy:byte);
begin
	cos:=sine[th];
	sin:=sine[th+64];
	x:=cos*wx;
	x:=x/256;

	y:=sin*wy;
	y:=y/256;

	x:=x-wx/2;
	y:=y-wy/2;

	px[ii]:=x+center[0];
	py[ii]:=y+center[1];

end;



procedure UpdateRaster();
	
begin
	SwitchDrawBank();

	//filler(10,100, 10);
	
	Rotate2D(theta, 0, 30, 80);
	Rotate2D(theta+60, 1, 80, 60);
	Rotate2D(theta*2+120, 2, 60, 60);
	Line(px[0],py[0],px[1],py[1]);
	Line(px[1],py[1],px[2],py[2]);
	Line(px[2],py[2],px[0],py[0]);

//	Polygon(px[0],py[0],px[1],py[1],px[2],py[2]);
	theta:=theta+5;

end;

procedure Grid();
begin
	for x:=1 to 4 do begin
		for y:=1 to 4 do begin
			
			z:=10;//sine[x+y];

			t:=z*16;
			t:=t/y;

			x0:=t;

			z:=x;

			t:=z*16;
			t:=t/y;

			y0:=t;
			

			Line(x0,y0,x1,y1);

			x1:=x0;
			y1:=y0;

		end;
	end;

end;


begin
	initmoveto();
	bmg_currbank :=0; // Current bitmap bank (added to high bit of putpixel)
	SetupPixelTables();
	inczp(zeropage1,10);
	poke(VIC_DATA_LOC, 0,$18);
	
	setmulticolormode();
	setbitmapmode();
	
	SCREEN_BG_COL:=BLACK;
	SCREEN_FG_COL:=BLACK;
	clearbitmap($2000,32);
	clearbitmap($6000,32);
	
	clearscreen(YELLOW,$D800);
	clearscreen(GREEN,$0400);
	clearscreen(BLUE,$4400);
	
	//	ClearBitmapB1();
	//	ClearBitmapB2();


	//while 1=1 do Grid();
	while 1=1 do UpdateRaster();

/*	preventirq();
	setmemoryconfig(1,1,0);
	DisableCIAInterrupts();

	RasterIRQ(UpdateRaster(),255, 1);
	enablerasterirq();
*/
	Loop();
	
end.
