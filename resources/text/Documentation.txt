General
Constants and variables
	zeropage
		Zeropage1-7
	sine
		<h2>sine</h2>
		Sine is a table of 256 bytes f
	screenmeory
		moveto

Built-in methods
	fill
		<h2>fill ( [ addr ], [ value ], [ count &lt;$ff ] )</h2><br>
		Fills [count] bytes with [value] at the [address].
		Examples:<br>
		<font color="@code">fill(zeropage4, 0, 0);</font><br>
		Fills values at zeropage4 with 256 bytes of 0<br>
		<br>
		<font color="@code">fill(^$0400, $20, 40);</font><br>
		Fills the first 40 bytes of screen memory with blanks (value $20)<br>
		<br>

	inczp
		<h2>inczp( [zeropage], [ val ] );</h2>
		Increases the mentioned zeropage pointer by [ val ] bytes. <br>
		Example:<br>
		<font color="@code">inczp(zeropage2, 64);</font><br>

	memcpy
		<h2>memcpy( [ src Addr ], [ src shift ], [ dst addr], [ count &lt;$ff ] )</h2>
		copies [ count ] bytes from src+shift to destination. <br><br>
		Examples:<br>
	moveto
		<h2>moveto( x, y, [ address high byte ] ); </h2><br>
		Move the screen cursor pointer "screenmemory" to position x,y on the screen with the given high byte.<br><br>
		Example:<br>
		<font color="@code">
		moveto(0,5, $04);<br>
		for i:=0 to 40 do
			screenmemory[i]:=i;
		</font>
		<br>
		fills the 5th row of screen bank 0 ($0400) with 40 bytes from 0 to i.

	peek
		<h2>peek( [ addr ], [ shift ])</h2>
		Retrieves value at address with shift. Must take address as input with ^.
		Example: <br>
		<font color="@code">a:=peek(^$D800, 0);</font><br>
		Retrieves the first byte of color ram<br>
		<br>
		<font color="@code">a:=peek(var, 4);</font><br><
		Retrieves the 4th byte of array, same as a:=var[4];<br>
		<br>
		<font color="@code">a:=peek(zeropage2, i);</font><br>
		Retrieves the ith value of zeropage2, same as a:=zeropage[i];
	poke
		<h2>poke( [ addr], [ shift], [ val ]);</h2>
		Sets the value at address with shift. Must take address as input with ^.
		Example: <br>
		<font color="@code">poke(^$D800, 3, 1);</font><br>
		Sets the third byte of color ram to white (1)<br>
		<br>
		<font color="@code">poke(var, 4,a);</font><br><
		Sets the 4th byte of array to a, same as var[4]:=a;<br>
		<br>
		<font color="@code">poke(zeropage2, i, 0);</font><br>
		Sets the ith value of zeropage2 to zero, same as zeropage[i]:=0;
	setspriteloc
		
	spritepos
		<h2>spritepos( [ spritex ], [ spritey ], [ sprite number ]);
		Sets the x,y position of sprite [ sprite number ]. Sprite x is an integer. <br>
		Example:<br>
		<font color="@code">spritepos(x,y, 0);</font><br>


Syntax
	define
		<h2>@define preprocessor</h2><br>
		The @define preprocessor directive lets you define variables compile-time which will replace
		all occurences in the text. For instance<br>
		<font color="@code">
		@define var "5"<br>
		@define putpixel "myPutPixel();"<br>
		//.. in the code<br>
		for a:=0 to @var do @myPutPixel();<br>
		</font><br>
		you can also use defines to exclude/include blocks of code:<br>
		<font color="@code">
		@ifdef var <br>
		printline("debug",0,10);<br>
		@endif<br>
		</font>
		</br>
	for
		<h2>for</h2><br>
		Syntax with begin blocks:<br><br>
		<font color="@code">
		for a:=0 to 20 do begin<br>
			screenMemory[a]:=b;
			incscreenx(40);
		end;<br>
		</font>
		Syntax without blocks:<br>
		<font color="@code">
		for a:=0 to 16 do <br>
			poke(SCREEN_BG_COL, 0, a);<br>
		<br>
		</font>
		Step syntax <b>(not implemented yet)</b>:<br>
		<font color="@code">
		for a:=0 to 16 step 4 do ..<br>
		<br>
		</font>
		<h3>onpage/offpage</h3>
		<font color="@code">
		for a:=0 to 4 <b>onpage</b> do <br>
		onpage forces the for block on the current page.
		</font>
	if
		<h2>conditionals: if</h2>
		The most basic of conditionals. <br>
		<font color="@code">
		if a>b then begin<br>
		...<br>
		end;</br>
		</font>
		<br>
		With else block, remove the final semicolon ; before the else keyword:<br>
		<font color="@code">
		if a>b then begin<br>
		...<br>
		end</br>
		else<br>
		   a:=b; // do something <br>
		</font>
		<br>
		The TRSE compiler tries to measure the size of the conditional block, and produces either an inpage or offpage branch. However, this might at times fail. It is therefore possible to force an offpage/onpage branch by using the onpage (&lt;127 bytes, fast) or offpage (&gt;127 bytes) keywords.<br>
		<br>
		Example: 
		<font color="@code">
		if a>b onpage then begin  // Force the branch to be fast/small, but requires less than 127 bytes of code<br>
		...<br>
		</font>
		<h3>Multiple logical conditionals</h3><br>
		Two keywords, <b>and</b> and <b>or</b> can be used for multiple logical conditionals.<br>
		<font color="@code">
		if (a>b and (b<c or d<>a)) then begin <br> 
		...<br>
		</font>
		Multiple logical conditionals always enforce offpage branching. 
		 



		</font>

	include
		<h2>@include preprocessor<h2><br>
		@include lets you include another source file. Syntax:<br>
		<font color="@code">
		@include "../Lib/MyGfxLib.ras"<br>
		</font>
	procedure
		<h2>procedures</h2><br>
		User-defined procedures:<br>
		<font color="@code">
		procedure MyProc(a,b : byte);<br>
		begin<br>
		   ...<br>
		end;<br>
		</font>
		<br>
		To call a procedure:<br>
		<font color="@code">
		MyProc(10,5);<br>
		</font>




